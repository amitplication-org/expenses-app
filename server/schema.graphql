# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumReportReportType {
  Expense
  Income
}

type Expense {
  createdAt: DateTime!
  currency: String!
  id: String!
  name: String!
  reports: Report
  updatedAt: DateTime!
  value: Float!
}

input ExpenseCreateInput {
  currency: String!
  name: String!
  reports: ReportWhereUniqueInput
  value: Float!
}

input ExpenseCreateNestedManyWithoutReportsInput {
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseListRelationFilter {
  every: ExpenseWhereInput
  none: ExpenseWhereInput
  some: ExpenseWhereInput
}

input ExpenseOrderByInput {
  createdAt: SortOrder
  currency: SortOrder
  id: SortOrder
  name: SortOrder
  reportsId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input ExpenseUpdateInput {
  currency: String
  name: String
  reports: ReportWhereUniqueInput
  value: Float
}

input ExpenseUpdateManyWithoutReportsInput {
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
}

input ExpenseWhereInput {
  currency: StringFilter
  id: StringFilter
  name: StringFilter
  reports: ReportWhereUniqueInput
  value: FloatFilter
}

input ExpenseWhereUniqueInput {
  id: String!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

type Income {
  createdAt: DateTime!
  currency: String!
  id: String!
  name: String!
  reports: Report
  updatedAt: DateTime!
  value: Float!
}

input IncomeCreateInput {
  currency: String!
  name: String!
  reports: ReportWhereUniqueInput
  value: Float!
}

input IncomeCreateNestedManyWithoutReportsInput {
  connect: [IncomeWhereUniqueInput!]
}

input IncomeListRelationFilter {
  every: IncomeWhereInput
  none: IncomeWhereInput
  some: IncomeWhereInput
}

input IncomeOrderByInput {
  createdAt: SortOrder
  currency: SortOrder
  id: SortOrder
  name: SortOrder
  reportsId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input IncomeUpdateInput {
  currency: String
  name: String
  reports: ReportWhereUniqueInput
  value: Float
}

input IncomeUpdateManyWithoutReportsInput {
  connect: [IncomeWhereUniqueInput!]
  disconnect: [IncomeWhereUniqueInput!]
  set: [IncomeWhereUniqueInput!]
}

input IncomeWhereInput {
  currency: StringFilter
  id: StringFilter
  name: StringFilter
  reports: ReportWhereUniqueInput
  value: FloatFilter
}

input IncomeWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createExpense(data: ExpenseCreateInput!): Expense!
  createIncome(data: IncomeCreateInput!): Income!
  createReport(data: ReportCreateInput!): Report!
  createUser(data: UserCreateInput!): User!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense!
  deleteIncome(where: IncomeWhereUniqueInput!): Income!
  deleteReport(where: ReportWhereUniqueInput!): Report!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense!
  updateIncome(data: IncomeUpdateInput!, where: IncomeWhereUniqueInput!): Income!
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _expensesMeta(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): MetaQueryPayload!
  _incomesMeta(orderBy: [IncomeOrderByInput!], skip: Float, take: Float, where: IncomeWhereInput): MetaQueryPayload!
  _reportsMeta(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): [Expense!]!
  income(where: IncomeWhereUniqueInput!): Income
  incomes(orderBy: [IncomeOrderByInput!], skip: Float, take: Float, where: IncomeWhereInput): [Income!]!
  report(where: ReportWhereUniqueInput!): Report
  reports(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): [Report!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Report {
  createdAt: DateTime!
  expense(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): [Expense!]!
  id: String!
  income(orderBy: [IncomeOrderByInput!], skip: Float, take: Float, where: IncomeWhereInput): [Income!]!
  reportType: EnumReportReportType
  updatedAt: DateTime!
  user: User
}

input ReportCreateInput {
  expense: ExpenseCreateNestedManyWithoutReportsInput
  income: IncomeCreateNestedManyWithoutReportsInput
  reportType: EnumReportReportType
  user: UserWhereUniqueInput
}

input ReportCreateNestedManyWithoutUsersInput {
  connect: [ReportWhereUniqueInput!]
}

input ReportListRelationFilter {
  every: ReportWhereInput
  none: ReportWhereInput
  some: ReportWhereInput
}

input ReportOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  reportType: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReportUpdateInput {
  expense: ExpenseUpdateManyWithoutReportsInput
  income: IncomeUpdateManyWithoutReportsInput
  reportType: EnumReportReportType
  user: UserWhereUniqueInput
}

input ReportUpdateManyWithoutUsersInput {
  connect: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
}

input ReportWhereInput {
  expense: ExpenseListRelationFilter
  id: StringFilter
  income: IncomeListRelationFilter
  reportType: EnumReportReportType
  user: UserWhereUniqueInput
}

input ReportWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  reports(orderBy: [ReportOrderByInput!], skip: Float, take: Float, where: ReportWhereInput): [Report!]!
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  reports: ReportCreateNestedManyWithoutUsersInput
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  reports: ReportUpdateManyWithoutUsersInput
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  reports: ReportListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
